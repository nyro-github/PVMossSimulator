package gui;

import parameters.SimulationParameters;
import java.awt.event.ActionEvent;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.JTextField;
import javax.swing.UnsupportedLookAndFeelException;
import output.EnergyCalculator;
import parameters.AbstractFactor;

public class MainFrame extends javax.swing.JFrame {
    
    private static final String LABEL_OUT_ENERGY_SUN_TEXT = "Energy generated by the sun:";
    private static final String LABEL_OUT_ENERGY_PV_TEXT = "Energy captured by PV Windows:";
    private static final String LABEL_OUT_ENERGY_MOSS_TEXT = "Energy generated by Moss:";
    private static final String LABEL_OUT_ENERGY_TOTAL_TEXT = "Total energy captured:";
    private static final String LABEL_OUT_MOSS_STATUS_TEXT = "Status of Moss:";   
    
    private static final String UNIT_ENERGY_PER_M2 = "kWh / m^2";
    private static final String UNIT_ENERGY = "kWh";
    private static final String UNIT_ENERGY_SMALL = "Wh";

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }
    
    private static Map<Integer, SimulationPreset> createPresetValueMap() {
        Map<Integer, SimulationPreset> map = new HashMap<>();
        map.put(1, new SimulationPreset(32.0, 95.0, 10.0));
        map.put(2, new SimulationPreset(3.0, 30.0, 80.0));
        map.put(3, new SimulationPreset(18.0, 75.0, 40.0));
        map.put(4, new SimulationPreset(0.0, 85.0, 20.0));
        map.put(5, new SimulationPreset(31.0, 90.0, 30.0));
        map.put(6, new SimulationPreset(12.0, 20.0, 95.0));
        map.put(7, new SimulationPreset(14.0, 70.0, 10.0));
        map.put(8, new SimulationPreset(5.0, 40.0, 70.0));
        map.put(9, new SimulationPreset(34.0, 95.0, 5.0));
        map.put(10, new SimulationPreset(10.0, 20.0, 90.0));
        return Map.copyOf(map); // make it unmodifiable
    }

    public static class SimulationPreset {
        public final double temp, sunLevel, cloudLevel;

        public SimulationPreset(double a, double b, double c) {
            this.temp = a;
            this.sunLevel = b;
            this.cloudLevel = c;
        }
        
        @Override
        public String toString() {
            return ("pvtemp = " + temp + "; sunLevel = " 
            + sunLevel + "; cloudLevel = " + cloudLevel);
        }
    }
    
    /**
     * This map corresponds to (preset_index :: PVTemp, SunLevel, CloudLevel, PVAngle)
     */
    public static final Map<Integer, SimulationPreset> PRESET_VALUES = createPresetValueMap();
    
    /**
     * Singleton for the simulation parameters used.
     */
    public static final SimulationParameters parameters = SimulationParameters.getInstance();
    
    /**
     * The index of the default preset (1).
     */
    private static final int DEFAULT_PRESET_INDEX = 1;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelPV = new javax.swing.JPanel();
        jLabelPVAngle = new javax.swing.JLabel();
        jTextFieldPVAngle = new javax.swing.JTextField();
        jCheckBoxPVPanel = new javax.swing.JCheckBox();
        jLabelUnitPVAngle = new javax.swing.JLabel();
        jPanelMoss = new javax.swing.JPanel();
        jLabelMossMoist = new javax.swing.JLabel();
        jLabelMossHumidity = new javax.swing.JLabel();
        jCheckBoxMossPanel = new javax.swing.JCheckBox();
        jTextFieldMossMoisture = new javax.swing.JTextField();
        jTextFieldMossHumidity = new javax.swing.JTextField();
        jLabelUnitMossMoisture = new javax.swing.JLabel();
        jLabelUnitMossHumidity = new javax.swing.JLabel();
        jPanelUniversalSettings = new javax.swing.JPanel();
        jLabelRunOutput = new javax.swing.JLabel();
        jLabelCloudLevel = new javax.swing.JLabel();
        jTextFieldCloudLevel = new javax.swing.JTextField();
        jLabelSunLevel = new javax.swing.JLabel();
        jTextFieldSunLevel = new javax.swing.JTextField();
        jLabelUnitCloudLevel = new javax.swing.JLabel();
        jLabelUnitSunLevel = new javax.swing.JLabel();
        jLabelTemp = new javax.swing.JLabel();
        jTextFieldTemp = new javax.swing.JTextField();
        jLabelUnitTemp = new javax.swing.JLabel();
        jLabelArea = new javax.swing.JLabel();
        jTextFieldArea = new javax.swing.JTextField();
        jLabelUnitArea = new javax.swing.JLabel();
        jLabelPresets = new javax.swing.JLabel();
        jComboBoxPresets = new javax.swing.JComboBox<>();
        jPanelOutput = new javax.swing.JPanel();
        jLabelRunOutput1 = new javax.swing.JLabel();
        jLabelOutEnergySun = new javax.swing.JLabel();
        jLabelOutEnergyPV = new javax.swing.JLabel();
        jLabelOutMossStatus = new javax.swing.JLabel();
        jLabelOutEnergyMoss = new javax.swing.JLabel();
        jLabelOutEnergyTotal = new javax.swing.JLabel();
        jButtonExit = new javax.swing.JButton();
        jButtonRun = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuInformation = new javax.swing.JMenu();
        jMenuItemInfoPVWindows = new javax.swing.JMenuItem();
        jMenuItemInfoMoss = new javax.swing.JMenuItem();
        jMenuReset = new javax.swing.JMenu();
        jMenuItemReset = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PV Window & Moss Energy Output Simulator");
        setResizable(false);

        jPanelPV.setBackground(new java.awt.Color(255, 153, 0));

        jLabelPVAngle.setText("Angle of sun:");

        jTextFieldPVAngle.setText("45.0");

        jCheckBoxPVPanel.setBackground(new java.awt.Color(255, 153, 51));
        jCheckBoxPVPanel.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jCheckBoxPVPanel.setSelected(true);
        jCheckBoxPVPanel.setText("PV Window Control Panel");
        jCheckBoxPVPanel.setFocusPainted(false);
        jCheckBoxPVPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPVPanelActionPerformed(evt);
            }
        });

        jLabelUnitPVAngle.setText("Â° (0 - 90)");

        javax.swing.GroupLayout jPanelPVLayout = new javax.swing.GroupLayout(jPanelPV);
        jPanelPV.setLayout(jPanelPVLayout);
        jPanelPVLayout.setHorizontalGroup(
            jPanelPVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPVLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPVLayout.createSequentialGroup()
                        .addComponent(jCheckBoxPVPanel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelPVLayout.createSequentialGroup()
                        .addComponent(jLabelPVAngle, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldPVAngle, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelUnitPVAngle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(32, 32, 32))))
        );
        jPanelPVLayout.setVerticalGroup(
            jPanelPVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPVLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxPVPanel)
                .addGap(24, 24, 24)
                .addGroup(jPanelPVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPVAngle)
                    .addComponent(jTextFieldPVAngle)
                    .addComponent(jLabelUnitPVAngle))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelMoss.setBackground(new java.awt.Color(51, 102, 0));

        jLabelMossMoist.setText("Moisture:");

        jLabelMossHumidity.setText("Humidity:");

        jCheckBoxMossPanel.setBackground(new java.awt.Color(51, 102, 0));
        jCheckBoxMossPanel.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jCheckBoxMossPanel.setSelected(true);
        jCheckBoxMossPanel.setText("Moss Control Panel");
        jCheckBoxMossPanel.setFocusPainted(false);
        jCheckBoxMossPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMossPanelActionPerformed(evt);
            }
        });

        jTextFieldMossMoisture.setText("20.0");

        jTextFieldMossHumidity.setText("20.0");

        jLabelUnitMossMoisture.setText("% (0 - 100)");

        jLabelUnitMossHumidity.setText("% (0 - 100)");

        javax.swing.GroupLayout jPanelMossLayout = new javax.swing.GroupLayout(jPanelMoss);
        jPanelMoss.setLayout(jPanelMossLayout);
        jPanelMossLayout.setHorizontalGroup(
            jPanelMossLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMossLayout.createSequentialGroup()
                .addGroup(jPanelMossLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMossLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanelMossLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelMossMoist, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMossHumidity, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelMossLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelMossLayout.createSequentialGroup()
                                .addComponent(jTextFieldMossHumidity, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelUnitMossHumidity))
                            .addGroup(jPanelMossLayout.createSequentialGroup()
                                .addComponent(jTextFieldMossMoisture, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelUnitMossMoisture))))
                    .addGroup(jPanelMossLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jCheckBoxMossPanel)))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanelMossLayout.setVerticalGroup(
            jPanelMossLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMossLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxMossPanel)
                .addGap(22, 22, 22)
                .addGroup(jPanelMossLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMossMoist)
                    .addComponent(jTextFieldMossMoisture)
                    .addComponent(jLabelUnitMossMoisture))
                .addGap(18, 18, 18)
                .addGroup(jPanelMossLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMossHumidity)
                    .addComponent(jLabelMossHumidity)
                    .addComponent(jLabelUnitMossHumidity))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanelUniversalSettings.setBackground(new java.awt.Color(0, 102, 255));

        jLabelRunOutput.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        jLabelRunOutput.setText("Universal Settings");

        jLabelCloudLevel.setText("Cloud factor:");

        jTextFieldCloudLevel.setText("20.0");

        jLabelSunLevel.setText("Sun Level:");

        jTextFieldSunLevel.setText("80.0");

        jLabelUnitCloudLevel.setText("% (0 - 100)");

        jLabelUnitSunLevel.setText("% (0 - 100)");

        jLabelTemp.setText("Temperature:");

        jTextFieldTemp.setText("20.0");

        jLabelUnitTemp.setText("Â°C (0 - 40)");

        jLabelArea.setText("Facade Area:");

        jTextFieldArea.setText("100.0");

        jLabelUnitArea.setText("mÂ²");

        jLabelPresets.setText("Preset:");

        jComboBoxPresets.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0. Custom", "1. Sunny Summer Noon", "2. Winter Morning", "3. Partially Cloudy Autumn Afternoon", "4. Cold Sunny Day", "5. Hot Day, Some Clouds", "6. Stormy Day with Low Light", "7. Spring Morning with Clear Skies", "8. Cloudy Late Afternoon in Early Winter", "9. Heatwave Noon with Clear Skies", "10. Early Autumn Foggy Morning" }));
        jComboBoxPresets.setSelectedIndex(1);
        jComboBoxPresets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPresetsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelUniversalSettingsLayout = new javax.swing.GroupLayout(jPanelUniversalSettings);
        jPanelUniversalSettings.setLayout(jPanelUniversalSettingsLayout);
        jPanelUniversalSettingsLayout.setHorizontalGroup(
            jPanelUniversalSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUniversalSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelUniversalSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelArea, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRunOutput)
                    .addGroup(jPanelUniversalSettingsLayout.createSequentialGroup()
                        .addGroup(jPanelUniversalSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelCloudLevel)
                            .addComponent(jLabelSunLevel)
                            .addComponent(jLabelPresets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelTemp, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelUniversalSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxPresets, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelUniversalSettingsLayout.createSequentialGroup()
                                .addComponent(jTextFieldSunLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelUnitCloudLevel))
                            .addGroup(jPanelUniversalSettingsLayout.createSequentialGroup()
                                .addGroup(jPanelUniversalSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextFieldTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldCloudLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldArea, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelUniversalSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelUnitSunLevel)
                                    .addComponent(jLabelUnitTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelUnitArea, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanelUniversalSettingsLayout.setVerticalGroup(
            jPanelUniversalSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUniversalSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelRunOutput)
                .addGap(18, 18, 18)
                .addGroup(jPanelUniversalSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPresets)
                    .addComponent(jComboBoxPresets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanelUniversalSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelUnitCloudLevel)
                    .addComponent(jLabelSunLevel)
                    .addComponent(jTextFieldSunLevel))
                .addGap(18, 18, 18)
                .addGroup(jPanelUniversalSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelUnitSunLevel)
                    .addComponent(jLabelCloudLevel)
                    .addComponent(jTextFieldCloudLevel))
                .addGap(18, 18, 18)
                .addGroup(jPanelUniversalSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTemp)
                    .addComponent(jTextFieldTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelUnitTemp))
                .addGap(18, 18, 18)
                .addGroup(jPanelUniversalSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelArea)
                    .addGroup(jPanelUniversalSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldArea)
                        .addComponent(jLabelUnitArea)))
                .addContainerGap())
        );

        jPanelOutput.setBackground(new java.awt.Color(255, 102, 102));

        jLabelRunOutput1.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        jLabelRunOutput1.setText("Output");

        jLabelOutEnergySun.setText(LABEL_OUT_ENERGY_SUN_TEXT);

        jLabelOutEnergyPV.setText(LABEL_OUT_ENERGY_PV_TEXT);

        jLabelOutMossStatus.setText(LABEL_OUT_MOSS_STATUS_TEXT);

        jLabelOutEnergyMoss.setText(LABEL_OUT_ENERGY_MOSS_TEXT);

        jLabelOutEnergyTotal.setText(LABEL_OUT_ENERGY_TOTAL_TEXT);

        jButtonExit.setText("Exit");
        jButtonExit.setFocusPainted(false);
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jButtonRun.setText("Run simulation for 24h");
        jButtonRun.setFocusPainted(false);
        jButtonRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelOutputLayout = new javax.swing.GroupLayout(jPanelOutput);
        jPanelOutput.setLayout(jPanelOutputLayout);
        jPanelOutputLayout.setHorizontalGroup(
            jPanelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelOutputLayout.createSequentialGroup()
                        .addComponent(jButtonExit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonRun, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelOutputLayout.createSequentialGroup()
                        .addGroup(jPanelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelOutEnergyMoss)
                            .addComponent(jLabelOutEnergyTotal)
                            .addComponent(jLabelOutEnergyPV)
                            .addComponent(jLabelRunOutput1)
                            .addComponent(jLabelOutEnergySun)
                            .addComponent(jLabelOutMossStatus))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelOutputLayout.setVerticalGroup(
            jPanelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelRunOutput1)
                .addGap(18, 18, 18)
                .addComponent(jLabelOutEnergySun)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOutEnergyPV)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOutMossStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOutEnergyMoss)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOutEnergyTotal)
                .addGap(26, 26, 26)
                .addGroup(jPanelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonRun, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        jMenuInformation.setText("Information");

        jMenuItemInfoPVWindows.setText("PV Windows");
        jMenuInformation.add(jMenuItemInfoPVWindows);

        jMenuItemInfoMoss.setText("Moss");
        jMenuInformation.add(jMenuItemInfoMoss);

        jMenuBar1.add(jMenuInformation);

        jMenuReset.setText("Reset");

        jMenuItemReset.setText("Reset to default");
        jMenuItemReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemResetActionPerformed(evt);
            }
        });
        jMenuReset.add(jMenuItemReset);

        jMenuBar1.add(jMenuReset);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelUniversalSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelPV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelMoss, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelMoss, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelPV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelUniversalSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Selecting the presets
     */
    private void jComboBoxPresetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPresetsActionPerformed

        int index = jComboBoxPresets.getSelectedIndex();
        
        if(index != 0) {
            SimulationPreset presetValues = PRESET_VALUES.get(index);
            jTextFieldTemp.setText(Double.toString(presetValues.temp));
            jTextFieldSunLevel.setText(Double.toString(presetValues.sunLevel));
            jTextFieldCloudLevel.setText(Double.toString(presetValues.cloudLevel));
        }
        
    }//GEN-LAST:event_jComboBoxPresetsActionPerformed

    /**
     * Disable/enable Moss panel
     */
    private void jCheckBoxMossPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMossPanelActionPerformed
        if(!jCheckBoxMossPanel.isSelected()) {
            setEnabledMossPanel(false);
            parameters.setEnabledMoss(false);
        } else {
            setEnabledMossPanel(true);
            parameters.setEnabledMoss(true);
        }
    }//GEN-LAST:event_jCheckBoxMossPanelActionPerformed

    /**
     * Disable/enable PV panel
     */
    private void jCheckBoxPVPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPVPanelActionPerformed
        if(!jCheckBoxPVPanel.isSelected()) {
            setEnabledPVPanel(false);
            parameters.setEnabledPV(false);
        } else {
            setEnabledPVPanel(true);
            parameters.setEnabledPV(true);
        }
    }//GEN-LAST:event_jCheckBoxPVPanelActionPerformed
    
    /**
     * Run button
     */
    private void jButtonRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunActionPerformed
        
       // Update the actual back-end factors in their classes
       if(!this.displayInvalidTextFields()) {
           this.updateFactors(); 
           jLabelOutEnergySun.setText(LABEL_OUT_ENERGY_SUN_TEXT + " " 
                   + EnergyCalculator.calculateSunEnergy() + " " + UNIT_ENERGY_PER_M2);
           jLabelOutEnergyPV.setText(LABEL_OUT_ENERGY_PV_TEXT + " "
                   + EnergyCalculator.calculatePVEnergy() + " " + UNIT_ENERGY_SMALL);
           jLabelOutEnergyMoss.setText(LABEL_OUT_ENERGY_MOSS_TEXT + " "
                   + EnergyCalculator.calculateMossEnergy() + " " + UNIT_ENERGY_SMALL);
           jLabelOutEnergyTotal.setText(LABEL_OUT_ENERGY_TOTAL_TEXT + " "
                   + EnergyCalculator.calculateTotalEnergy() + " " + UNIT_ENERGY);
           jLabelOutMossStatus.setText(LABEL_OUT_MOSS_STATUS_TEXT + " " 
                   + EnergyCalculator.getMossStatus());
       } else {
           this.resetOutputs();
       }
        
    }//GEN-LAST:event_jButtonRunActionPerformed

    /**
     * Reset to default button
     */
    private void jMenuItemResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemResetActionPerformed
        jCheckBoxPVPanel.setSelected(true);
        this.setEnabledPVPanel(true);
        
        jCheckBoxMossPanel.setSelected(true);
        this.setEnabledMossPanel(true);
        
        resetDefaultParameters();
    }//GEN-LAST:event_jMenuItemResetActionPerformed

    /**
     * Exit button
     */
    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButtonExitActionPerformed

    /**
     * Returns a map of the type (field of some factor, that factor), is more
     * of a helper method for getInvalidTextFields();
     * 
     * @return a map of the type (field of some factor, that factor).
     */
    private Map<JTextField, AbstractFactor> getFieldFactorMap() {
        return Map.of(jTextFieldSunLevel, parameters.getSunLevel(),
            jTextFieldCloudLevel, parameters.getCloudLevel(),
            jTextFieldPVAngle, parameters.getPVAngle(),
            jTextFieldArea, parameters.getArea(),
            jTextFieldTemp, parameters.getTemp(),
            jTextFieldMossHumidity, parameters.getMossHumidity(),
            jTextFieldMossMoisture, parameters.getMossMoisture()
        );
    }
    
    /**
     * Sets every component in the PV panel to setting.
     * 
     * @param setting Either true or false.
     */
    private void setEnabledPVPanel(boolean setting) {
        jTextFieldPVAngle.setEnabled(setting);
    }
    
    /**
     * Sets every component in the Moss panel to 'setting'.
     * 
     * @param setting Either true or false.
     */
    private void setEnabledMossPanel(boolean setting) {
        jTextFieldMossHumidity.setEnabled(setting);
        jTextFieldMossMoisture.setEnabled(setting);
    }
    
    /**
     * Updates the factor classes according to user input.
     */
    private void updateFactors() {
        for (Map.Entry<JTextField, AbstractFactor> entry : getFieldFactorMap().entrySet()) {
            // For every factor, set its value in its respective class to the value in its text field
            entry.getValue().setVal(entry.getKey().getText());
        }
    }
    
    /**
     * Boolean method made to find if a field contains a valid numerical value
     * according to the lower and higher limit.
     * 
     * @param field The text field.
     * @param low The lower limit of what should be in the text field.
     * @param high The higher limit of what should be in the text field.
     * @return True if it is a valid field, false otherwise.
     */
    private boolean isValidTextField(JTextField field, AbstractFactor factor) {
        
        // If a text field is not enabled, then we wont use it at all, 
        // so it is valid logically (empty domain).
        if(!field.isEnabled()) {
            return true;
        }
        
        double value;
        try {
            value = Double.parseDouble(field.getText());
        } catch (NumberFormatException e) {
            return false;
        }
        
        return factor.isValidValue(value);
    }
    
    /**
     * Method which returns a HashSet of text fields which are not considered
     * valid within their respective constraints.
     * 
     * @return A HashSet of text fields which contain invalid values.
     */
    private Set<JTextField> getInvalidTextFields() {
        Set<JTextField> invalidFields = new HashSet<>();

        for (Map.Entry<JTextField, AbstractFactor> entry : getFieldFactorMap().entrySet()) {
            if (!isValidTextField(entry.getKey(), entry.getValue())) {
                invalidFields.add(entry.getKey());
            }
        }

        return invalidFields;
    }

    /**
     * For every invalid value entered in a field, that same field will be
     * disabled for 1 second stating "Invalid" and then enabled with the default
     * value. 
     * This is so that the user knows which value entered is invalid.
     * 
     * @return True if there are invalid fields, false otherwise
     */
    private boolean displayInvalidTextFields() {
        Set<JTextField> invalidFields = this.getInvalidTextFields();
        for(JTextField field : invalidFields) {
            jButtonRun.setEnabled(false);
            field.setEnabled(false);
            field.setText("Invalid");
            new javax.swing.Timer(1000, (ActionEvent e) -> {
                field.setText("");
                field.setEnabled(true);
                jButtonRun.setEnabled(true);
            }) {{
              setRepeats(false);
              start();
            }};
        }
        if(!invalidFields.isEmpty()) {
            return true;
        }
        return false;
    }
    
    /**
     * Visually and back-end resets the parameters to their default values.
     */
    private void resetDefaultParameters() {
        for (Map.Entry<JTextField, AbstractFactor> entry : getFieldFactorMap().entrySet()) {
            entry.getKey().setText(entry.getValue().getDefaultValString());
        }

        jComboBoxPresets.setSelectedIndex(DEFAULT_PRESET_INDEX);
    }
    
    /**
     * Resets the outputs to be empty in case of invalidity of inputs.
     */
    private void resetOutputs() {
        jLabelOutEnergySun.setText(LABEL_OUT_ENERGY_SUN_TEXT);
        jLabelOutEnergyMoss.setText(LABEL_OUT_ENERGY_MOSS_TEXT);
        jLabelOutEnergyPV.setText(LABEL_OUT_ENERGY_PV_TEXT);
        jLabelOutMossStatus.setText(LABEL_OUT_MOSS_STATUS_TEXT);
        jLabelOutEnergyTotal.setText(LABEL_OUT_ENERGY_TOTAL_TEXT);
    }
    
    public static void main(String args[]) {
        
        /* Set the look and feel of the app to windows theme */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
        }
        
        /* Create and display the frame */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonRun;
    private javax.swing.JCheckBox jCheckBoxMossPanel;
    private javax.swing.JCheckBox jCheckBoxPVPanel;
    private javax.swing.JComboBox<String> jComboBoxPresets;
    private javax.swing.JLabel jLabelArea;
    private javax.swing.JLabel jLabelCloudLevel;
    private javax.swing.JLabel jLabelMossHumidity;
    private javax.swing.JLabel jLabelMossMoist;
    private javax.swing.JLabel jLabelOutEnergyMoss;
    private javax.swing.JLabel jLabelOutEnergyPV;
    private javax.swing.JLabel jLabelOutEnergySun;
    private javax.swing.JLabel jLabelOutEnergyTotal;
    private javax.swing.JLabel jLabelOutMossStatus;
    private javax.swing.JLabel jLabelPVAngle;
    private javax.swing.JLabel jLabelPresets;
    private javax.swing.JLabel jLabelRunOutput;
    private javax.swing.JLabel jLabelRunOutput1;
    private javax.swing.JLabel jLabelSunLevel;
    private javax.swing.JLabel jLabelTemp;
    private javax.swing.JLabel jLabelUnitArea;
    private javax.swing.JLabel jLabelUnitCloudLevel;
    private javax.swing.JLabel jLabelUnitMossHumidity;
    private javax.swing.JLabel jLabelUnitMossMoisture;
    private javax.swing.JLabel jLabelUnitPVAngle;
    private javax.swing.JLabel jLabelUnitSunLevel;
    private javax.swing.JLabel jLabelUnitTemp;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuInformation;
    private javax.swing.JMenuItem jMenuItemInfoMoss;
    private javax.swing.JMenuItem jMenuItemInfoPVWindows;
    private javax.swing.JMenuItem jMenuItemReset;
    private javax.swing.JMenu jMenuReset;
    private javax.swing.JPanel jPanelMoss;
    private javax.swing.JPanel jPanelOutput;
    private javax.swing.JPanel jPanelPV;
    private javax.swing.JPanel jPanelUniversalSettings;
    private javax.swing.JTextField jTextFieldArea;
    private javax.swing.JTextField jTextFieldCloudLevel;
    private javax.swing.JTextField jTextFieldMossHumidity;
    private javax.swing.JTextField jTextFieldMossMoisture;
    private javax.swing.JTextField jTextFieldPVAngle;
    private javax.swing.JTextField jTextFieldSunLevel;
    private javax.swing.JTextField jTextFieldTemp;
    // End of variables declaration//GEN-END:variables
}
